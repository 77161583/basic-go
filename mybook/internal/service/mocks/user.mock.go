// Code generated by MockGen. DO NOT EDIT.
// Source: mybook/internal/service/user.go
//
// Generated by this command:
//
//	mockgen -source=mybook/internal/service/user.go -package=svcmocks -destination=mybook/internal/service/mocks/user.mock.go
//
// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	domain "basic-go/mybook/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserServicePackage is a mock of UserServicePackage interface.
type MockUserServicePackage struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicePackageMockRecorder
}

// MockUserServicePackageMockRecorder is the mock recorder for MockUserServicePackage.
type MockUserServicePackageMockRecorder struct {
	mock *MockUserServicePackage
}

// NewMockUserServicePackage creates a new mock instance.
func NewMockUserServicePackage(ctrl *gomock.Controller) *MockUserServicePackage {
	mock := &MockUserServicePackage{ctrl: ctrl}
	mock.recorder = &MockUserServicePackageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServicePackage) EXPECT() *MockUserServicePackageMockRecorder {
	return m.recorder
}

// Edit mocks base method.
func (m *MockUserServicePackage) Edit(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserServicePackageMockRecorder) Edit(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserServicePackage)(nil).Edit), ctx, u)
}

// FindById mocks base method.
func (m *MockUserServicePackage) FindById(ctx context.Context, userId int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, userId)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserServicePackageMockRecorder) FindById(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserServicePackage)(nil).FindById), ctx, userId)
}

// FindOrCreate mocks base method.
func (m *MockUserServicePackage) FindOrCreate(ctx context.Context, phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", ctx, phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockUserServicePackageMockRecorder) FindOrCreate(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockUserServicePackage)(nil).FindOrCreate), ctx, phone)
}

// Login mocks base method.
func (m *MockUserServicePackage) Login(ctx context.Context, email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServicePackageMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServicePackage)(nil).Login), ctx, email, password)
}

// Profile mocks base method.
func (m *MockUserServicePackage) Profile(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockUserServicePackageMockRecorder) Profile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserServicePackage)(nil).Profile), ctx, id)
}

// SignUp mocks base method.
func (m *MockUserServicePackage) SignUp(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServicePackageMockRecorder) SignUp(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServicePackage)(nil).SignUp), ctx, u)
}
